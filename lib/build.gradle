apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'

// CocoaPods requires the podspec to have a version.
version = "1.0"

android {
    compileSdkVersion project.android_compilesdk.toInteger()
    defaultConfig {
        minSdkVersion project.android_minsdk.toInteger()
        targetSdkVersion project.android_targetsdk.toInteger()
    }
    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            // MPP libraries don't currently get this resolution automatically
            matchingFallbacks = ['release']
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")       \
                                    ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('lib')
            }
        }
    }
    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
        }
        commonTest.dependencies {
            implementation "io.ktor:ktor-client-mock:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            implementation "io.mockk:mockk-common:$mockk_version"

            implementation 'org.jetbrains.kotlin:kotlin-test'
            implementation 'org.jetbrains.kotlin:kotlin-test-junit'
        }
        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
            implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
        }
        androidTest.dependencies {
            implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            implementation "io.mockk:mockk:$mockk_version"

            implementation 'com.android.support.test:runner:1.0.2'
        }
        iosMain.dependencies {
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
        }
        iosTest.dependencies {
            implementation "io.ktor:ktor-client-mock-native:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
        }
    }

    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "Some description for a Kotlin/Native module"
        homepage = "Link to a Kotlin/Native module homepage"
    }

    task iosTest {
        def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
        dependsOn 'linkTestDebugExecutableIos'
        group = JavaBasePlugin.VERIFICATION_GROUP
        description = "Runs tests for target 'ios' on an iOS simulator"

        doLast {
            def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
            exec {
                commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
            }
        }
    }

//    tasks.named("check") {
//        dependsOn("iosTest")
//    }
}