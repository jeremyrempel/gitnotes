apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'

// CocoaPods requires the podspec to have a version.
version = "1.0"

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.github.jeremyrempel.gitnotes"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")      \
                                   ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            compilations.main.outputKinds("FRAMEWORK")
            compilations.test.outputKinds("FRAMEWORK")
        }
    }
    sourceSets {
        configure([androidMain]) {
            dependsOn commonMain
        }
        configure([iosMain]) {
            dependsOn commonMain
        }

//        configure([ios64Main]) {
//            dependsOn iosMain
//        }

        commonMain.dependencies {
            implementation kotlin('stdlib-common')
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
        }
        commonTest.dependencies {
            implementation "io.ktor:ktor-client-mock:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            implementation "io.mockk:mockk-common:$mockk_version"

            implementation 'org.jetbrains.kotlin:kotlin-test'
            implementation 'org.jetbrains.kotlin:kotlin-test-junit'
        }
        androidMain.dependencies {
            implementation fileTree(dir: 'libs', include: ['*.jar'])
            implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
            implementation "androidx.constraintlayout:constraintlayout:$androidx_conlayout_version"
            implementation "com.github.bumptech.glide:glide:$glide_version"


            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
            implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

//                kapt "com.github.bumptech.glide:compiler:$glide_version"
        }
        androidTest.dependencies {
            implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
            implementation "io.mockk:mockk:$mockk_version"

            implementation 'com.android.support.test:runner:1.0.2'
        }
        iosMain.dependencies {
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
        }
        iosTest.dependencies {
            implementation "io.ktor:ktor-client-mock-native:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
        }
    }

    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "Some description for a Kotlin/Native module"
        homepage = "Link to a Kotlin/Native module homepage"
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    def target = project.findProperty("kotlin.target") ?: "ios"
    dependsOn "link${buildType.toLowerCase().capitalize()}Framework${target.capitalize()}"

    doLast {
        def srcFile = kotlin.targets."$target".compilations.main.getBinary("FRAMEWORK", buildType)
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}